これは厳しいパート２だぬ。

素直なやり方は、全てを直方体で管理して、
要素が追加されたとき、削られたり重なったりした部分を切断して、
全て直方体の集まりで管理する方法。
しかし、貫いたりL字に欠いたりという様々な場合を全て尽くすような分解はなかなか正しく作れなさそうだ。

もう一つ思いついたのは、それぞれの軸について、現われる座標の全てを調べて、
その境界だけを空間の切れ目とする方法。
これなら、元のやり方に一枚皮を被せるだけで実現できる。
なるほどこれか。

最初の例
on x=10..12,y=10..12,z=10..12
on x=11..13,y=11..13,z=11..13
off x=9..11,y=9..11,z=9..11
on x=10..10,y=10..10,z=10..10
から、例えばX軸は、右側は「12まで」を「13未満まで」と読んで、
すると現われる数値は9,10,11,12,13,14だけで、
これは #0 : 9-9, #1 : 10-10, #2 : 11-11, #3 : 12-12, #4 : 13-13
の4つの区間だけを考えればよくて、
10..12 = #1..#3
11..13 = #2..#4
9..11  = #0..#2
10..10 = #1..#1
(区間に幅がなくてわかりにくいけど) と読み替えればよい。

下限と、上限+1を集めてくると、区切りとして注目するべき数が全て見つかる。
そこから、個々の範囲 11..13 を #2..#4 に読み替えるには、
実範囲を番号に写すMapを使うことになる。(上限は+1してlookupして-1する)

ビットマップが作成できた後に、個々の箱の容積を調べるには、
n番目の区間の幅が必要。それはArrayに区切りを入れておいて、n番目とn+1番目を見たらよい。
