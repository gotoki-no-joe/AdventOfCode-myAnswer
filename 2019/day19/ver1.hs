import qualified Data.IntMap as IM

-- pc, base, memory, input, output
interpret :: Int -> Int -> IM.IntMap Int -> [Int] -> [Int]
interpret pc base mem js = case opcode of
    1 -> arith (+)
    2 -> arith (*)
    3 -> interpret (pc + 2) base (memwrite ad1 (head js)) (tail js)
    4 -> av1 : interpret (pc + 2) base mem js
    5 -> jump (av1 /= 0)
    6 -> jump (av1 == 0)
    7 -> set1 (av1 <  av2)
    8 -> set1 (av1 == av2)
    9 -> interpret (pc + 2) (base + av1) mem js
    99 -> []
    x -> error (unwords ["Illegal Opcode", show pc, show x])
  where
    opint = mem IM.! pc
    opcode = opint `mod` 100
    am1 = opint `div`   100 `mod` 10
    am2 = opint `div`  1000 `mod` 10
    am3 = opint `div` 10000 `mod` 10
    ma a = IM.findWithDefault 0 a mem
    av am ofs = (if am == 1 then id else ma) $ ad am ofs
    ad am ofs = (if am == 2 then (base +) else id) (ma $ pc + ofs)
    av1 = av am1 1
    ad1 = ad am1 1
    av2 = av am2 2
    ad3 = ad am3 3
    arith op = interpret (pc + 4) base (memwrite ad3 (op av1 av2)) js
    jump True  = interpret av2 base mem js
    jump False = interpret (pc + 3) base mem js
    set1 b = interpret (pc + 4) base (memwrite ad3 (if b then 1 else 0)) js
    memwrite ad v = IM.insert ad v mem

-- もう面倒なんでinput.txt取り込んでしまうね？
input = [109,424,203,1,21102,11,1,0,1105,1,282,21101,0,18,0,1105,1,259,2101,0,1,221,203,1,21102,1,31,0,1105,1,282,21102,1,38,0,1105,1,259,20102,1,23,2,21201,1,0,3,21102,1,1,1,21102,57,1,0,1106,0,303,2102,1,1,222,21002,221,1,3,20101,0,221,2,21101,0,259,1,21101,0,80,0,1105,1,225,21101,44,0,2,21102,91,1,0,1105,1,303,1202,1,1,223,21002,222,1,4,21102,259,1,3,21102,1,225,2,21102,225,1,1,21101,118,0,0,1106,0,225,21002,222,1,3,21101,163,0,2,21101,0,133,0,1106,0,303,21202,1,-1,1,22001,223,1,1,21102,148,1,0,1106,0,259,1202,1,1,223,20101,0,221,4,21001,222,0,3,21102,1,24,2,1001,132,-2,224,1002,224,2,224,1001,224,3,224,1002,132,-1,132,1,224,132,224,21001,224,1,1,21101,195,0,0,105,1,108,20207,1,223,2,21002,23,1,1,21102,-1,1,3,21102,1,214,0,1106,0,303,22101,1,1,1,204,1,99,0,0,0,0,109,5,2101,0,-4,249,22102,1,-3,1,22101,0,-2,2,22101,0,-1,3,21102,250,1,0,1106,0,225,21202,1,1,-4,109,-5,2105,1,0,109,3,22107,0,-2,-1,21202,-1,2,-1,21201,-1,-1,-1,22202,-1,-2,-2,109,-3,2106,0,0,109,3,21207,-2,0,-1,1206,-1,294,104,0,99,22102,1,-2,-2,109,-3,2105,1,0,109,5,22207,-3,-4,-1,1206,-1,346,22201,-4,-3,-4,21202,-3,-1,-1,22201,-4,-1,2,21202,2,-1,-1,22201,-4,-1,1,21202,-2,1,3,21101,0,343,0,1106,0,303,1106,0,415,22207,-2,-3,-1,1206,-1,387,22201,-3,-2,-3,21202,-2,-1,-1,22201,-3,-1,3,21202,3,-1,-1,22201,-3,-1,2,21201,-4,0,1,21101,384,0,0,1105,1,303,1105,1,415,21202,-4,-1,-4,22201,-4,-3,-4,22202,-3,-2,-2,22202,-2,-4,-4,22202,-3,-2,-3,21202,-4,-1,-2,22201,-3,-2,1,21202,1,1,-4,109,-5,2105,1,0]
prog = IM.fromList $ zip [0..] input

test x y = (1 ==) $ head $ interpret 0 0 prog [x,y]

part1 :: Int
part1 = length [ () | x <- [0..49], y <- [0..49], test x y ]

themap = unlines [ [ if test x y then '#' else '.' | x <- [0..49]] | y <- [0..49]]

{-
y行の有効範囲の左端がaだったとき、y+1行の左端はa以降にある。
y-99行a+99桁が有効範囲ならば、その対角線でサンタの宇宙船を入れられる。
-}

test1 x y = x >= 0 && y >= 0 && test x y

part2a = head [ (x,y-99) | (x,y) <- loop 0 0, test (x+99) (y-99) ]
  where
    loop y a = (a,y) : loop (succ y) (head $ dropWhile (not . flip test1 (succ y)) [a..])

{-
y行の有効範囲の右端がbだったとき、y+1行の右端はb以降にあるが、直下は有効範囲外かもしれない。
y+99行b-99桁が有効範囲ならば、その対角線でサンタの宇宙船を入れられる。

しかしこれはビームが横向きだったときに、右すぎるかもしれない。
-}

part2b = head [ (x-99, y) | (x,y) <- loop 0 0, test (x-99) (y+99) ]
  where
    loop y b = (b,y) : loop (succ y) (last $ takeWhile (flip test1 (succ y)) $ dropWhile (not . flip test1 (succ y)) [b..])

{-
*Main> part1
179
*Main> part2a
(976,485)
*Main> part2b
(976,485)
*Main> putStrLn themap
#.................................................
..#...............................................
....#.............................................
......#...........................................
.......##.........................................
.........###......................................
...........###....................................
............####..................................
..............####................................
................####..............................
.................######...........................
...................######.........................
.....................######.......................
......................#######.....................
........................########..................
..........................########................
...........................#########..............
.............................#########............
...............................#########..........
................................###########.......
..................................###########.....
....................................###########...
.....................................############.
.......................................###########
.........................................#########
..........................................########
............................................######
..............................................####
...............................................###
.................................................#
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
..................................................
-}