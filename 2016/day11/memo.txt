エレベータ、5種類のチップと発電機を動かす。
それぞれ、1～4のフロアに存在できる。
4^11 = 2^22 で状態は表現できる。

対応するチップがフロアにない発電機があるとき、対応する発電機のないチップは壊れる。これが禁止状態。
初期状態から幅優先探索で探し、目標状態までのステップを数える。

判定が必要なのは
・ゴール状態かどうか
・禁止状態かどうか
・既に探索済みの状態かどうか

作るのは、現在の状態から次の状態全て
エレベータがあるフロアから、何か一つは持ち出さないといけなくて、二つまでしか持ち出せない

エレベータの位置 Int, 各元素を次元としてそれぞれのチップの位置 Vector Int, 発電機の位置 Vector Int
で状態を表現すると仮定する。

次状態の生成は、
ev += 1 と ev -= 1 のうち、行ける方を全て考える。
ev と同じ位置にあるチップと発電機全てから、どれか一つを選んで持ち出す。
どれかふたつを選んで持ち出す。
この全ての組み合わせを考えるには、添え字は分離していない方がやりやすいな。
0をev、奇数をチップ、偶数を発電機に割り当てると判りやすいか。

Haskellで考えてすら面倒くさいというのがたまらんな。JS,TSで書けるかしらこんなん。
methodに押し込んでしまえば何とでもなるかしら。

禁止状態の判定は、
全てのフロアについてチェックする。（本当は、Evがいたところと来たところだけ調べればよいが。）

----- 2020/12/11

5種類の元素がある。5チップと5発電機。
現在の状態は、自分および10要素がどのフロアにいるか1～4の4^11が最小であるが、計算がしにくい。
5つのチップと発電機について、ビット番号0～4と5～9を割り当てて、
あるフロアにそれがあるとき1とする10ビットの整数をフロアごとに4つ割り振る。
自分の位置は1-4で管理する。
それぞれのフロアについて、
・全ての発電機に対応するチップがあれば、封じ込められているので問題ない。~gens | chips == all1
・露出している発電機があっても、露出しているチップがなければ問題ない。gens & chips == chips 上に含まれる？

この条件がややこしいな。
露出している発電機と、露出しているチップの両方があるとまずい。
