import Data.Digest.Pure.MD5
import qualified Data.ByteString.Lazy.Char8 as BS8
-- import qualified Data.ByteString as BS
import Data.List

test1 = md5 (BS8.pack "abc18")

-- 最初に同じ文字が3つ並んだものがあるときそれを返す

find3 xs
  | null l = Nothing
  | True   = Just (head l)
  where
    l = take 1 [ a | (a:b:c:_) <- tails xs, a == b, b == c ]

-- 同じ文字が5つ並んだものがあるときそれを全て返す
find5s xs = [ a | (a:b:c:d:e:_) <- tails xs, a == b, b == c, c == d, d == e ]

{-
ソルトから、MD5の列を作ることができる。
その列で、find3で何か返すものを見つけることができる。
その要素の次から1000個で、find5sでそれを持つものを見つける必要がある。
そして、そのような要素を64個見つける必要がある。
最後に、その64個めが何番目かを知らないといけない。
-}

gen f salt =
  [ (i,find3 m, find5s m)
  | i <- [1..]
  , let m = f $ salt ++ show i
  ]

findkeys f salt =
  [ i
  | (i,Just c,_):ks <- tails $ gen f salt
  , any (elem c) $ map trd $ take 1000 ks
  ]

trd (_,_,c) = c

test2 = take 64 $ findkeys md5_1 "abc"

part1 = take 64 $ findkeys md5_1 "jlmsuwbz"

{-
*Main> test1
0034e0923cc38887a57bd7b1d4f953df
*Main> test2
[39,92,110,184,291,314,343,385,459,461,489,771,781,887,955,1144,5742,5781,5783,6016,6093,6219,7833,7858,7918,7937,8042,8045,8183,8189,8205,8232,8375,8407,8431,8503,8517,8626,8672,8730,8811,9497,9536,13268,13439,13479,13560,13663,15758,15883,16187,16342,16479,20087,20371,20582,20635,20669,21908,21927,21978,22023,22193,22728]
*Main> part1
[1139,1180,1190,1304,1340,1462,1615,1806,1820,1891,2771,2810,2922,3042,3392,3581,3673,3700,7958,8101,8318,8529,8694,15969,16398,16853,17083,17236,17617,17721,20769,20885,21009,21277,21378,21557,21684,23191,23237,23274,23289,23340,23421,23486,23506,23608,23653,23691,23700,23803,23916,24007,24053,24167,24169,34300,34463,34487,34638,34769,35162,35170,35171,35186]
-}

{-
md5が16バイトの列で、それに繰り返し適用するという話で、128ビットアドレスがないと網羅できないから、
関数適用の繰り返しを効率化する方法は使えない。つまり、言われたとおりにやるしかない気がする。
-}

ntimes n f x = iterate f x !! n

md5_1 = show . md5 . BS8.pack
md5_2017 = ntimes 2017 md5_1

test3 = md5_2017 "abc0"

test4 = take 64 $ findkeys md5_2017 "abc"

part2 = take 64 $ findkeys md5_2017 "jlmsuwbz"

{-
*Main> test4
[10,25,1471,1596,1610,1715,1778,1951,1994,2023,2288,4249,4340,4352,4533,4829,4878,5014,5226,5803,6878,7087,7120,7137,7182,7229,7280,7317,7460,7841,8058,8277,8472,8473,8487,8550,8574,17372,17438,17506,17737,17768,18105,18175,18210,18302,19212,19236,19270,19334,19346,19366,19369,19471,19498,19799,19880,19915,19947,19950,20212,22097,22122,22551]
*Main> test3
"a107ff634856bb300138cac6568c0f24"
*Main> part2
[41,108,151,311,312,375,501,531,595,3794,3810,3858,4006,4083,4272,4665,4738,5721,5938,6136,6165,6233,6253,6271,6326,7504,7619,7654,7870,8108,8142,8356,8394,8739,12382,12596,12662,12822,13194,13210,13413,14536,14597,14917,14927,14948,15001,15063,15150,15271,15324,15431,19351,19480,19481,19657,19724,20049,20257,22196,22381,22382,22417,22429]
たいへん時間がかかりました…
-}
