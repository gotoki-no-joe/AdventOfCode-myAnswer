大した数ではないと思うのだが、ステップが重くて終わらない。
Trieみたいなものを使って、もっと効率的にする必要があるのかな。

まず元素記号をアルファベットにして、ノード分岐を一つで済ませるようにする。
次に、書き換え規則を発動させるときに、発動させずに元のままのルートと
発動させて分岐したルートを同時に生成する。
でもあれか、合流させないと効率化しないけど、合流するとTrieではなくなる。
Trieにして効率は上がるだろうか。
メモリ効率だけな気もしないでもない。

還元させるので充分だと思った、というかそれ以上のアイデアがないなぁ。

parserだと思って構文解析してみる？
しかし非終端記号がそのまま出てる感じ。
いやそれ単に、parserの|の試行がそのまま再帰になって、
大変なことになるのは同じなんじゃないかな？
すんげぇ賢いオートマトンの書き換えをしない限り。
つまりparsecではだめ。yaccならいけるのかも。

よく見ると、大文字に結局重複はないので安全に1文字に置き換えられるわ。
それだけでも有り難い。
前方向でするならなおさら。
よく見たら Ti と Th がカブってたわ。とほほ。

あとは、幅優先でする意味もあまりなくて、
深さ優先でしてもいいんじゃないかと。
その方がメモリは喰わない。
枝刈りをする方法がよくわからないけれど。

いや、それだと同じものを何度も調べてしまってムダ。
となると、動的プログラミングの出番になってくるのだけど、
どう使ったものか見当も付かない。

ステップ単位でなくて、結果の長さでグループ分けして
既に知っている要素は重複して調べないようにしないと
ムダが取り切れないのかな。
というか、既知の奴全部入れておくSetが必要という感じ？

JSで書いてみたらかなり速くなったけれど、それでも力尽くではできない感じ。
もうヒントを見よう。

<https://www.reddit.com/r/adventofcode/comments/3xh2ow/day_19_some_dumb_luck/>

1. ゴールから逆向きに書き換えを行い、
2. 深さ優先探索で、
3. 書き換えの位置が後ろのものを優先すると、
簡単に答えにたどり着ける、というか、
最初にeまで還元された経路が最善の答えになっている、という話。

これは完璧な解答ではないな。

<https://www.reddit.com/r/adventofcode/comments/3xflz8/day_19_solutions/cy4etju/>
正解スレ

（見通しのために、2文字の元素記号を数字などの記号に置き換える）
電子eは左辺にしか出現せず、最初に使ったら終わりだということはすぐわかる。

一部の元素記号が、変換の左辺に登場しない、
つまり一度出現したらその後変化しないものであることに気付く。
具体的にはRn, Y, Arの3つ。
これらを" <Rn> "と強調して見比べてみると、
その出現の仕方に恣意的なものがあることに気付く。
それで変換規則を分類してみると、
A,B,C,D,XはRn, Y, Ar以外の元素として、

e => AB
X => AB
X => A <Rn> B <Ar>
X => A <Rn> B <Y> C <Ar>
X => A <Rn> B <Y> C <Y> D <Ar>

というパターンしかない、しかも後者3つのB,C,DはF,Al,Mgしか出現しない。
一度生成されたら消えないため、
<Rn>から<Ar>まで、ときどき<Y>を挟むという構造は入れ子にしかならない。
どこかが欠損したり、<Rn1> <Rn2> <Ar1> <Ar2> のように食い違うことはなく、
こう並んでいたら<Rn1> <Rn2> <Ar2> <Ar1>のように対応がつく。

すなわち、<Rn><Y><Ar>の間の部分列に関して、
それらをF,Al,Mgの1文字へ還元する最短の書き換え回数をまず求め、
また<Ar>から$までの部分列も独立して考えることができる。
<Rn>から<Rn>までの間もいい。

しかしその次、<Rn>より前をどこまで還元してから<Rn>...<Ar>を消去するべきかは悩ましい。
ここは総当たりでやらないとわからない。
また、その消去もやり方が複数ある恐れもある。
どうやるんだろう…

と思っていたら、もっと劇的だった。

「どういう順序でやるべきかはわからなくても、
X => AB で還元すると長さは1減る。
<Y>の個数で他の還元も減る長さは決まっている。
だから、それで導出できるなら文字数だけで判断できる。

どっひゃー。

+1 : e => AB
+1 : X => AB
+3 : X => A <Rn> B <Ar>
+5 : X => A <Rn> B <Y> C <Ar>
+7 : X => A <Rn> B <Y> C <Y> D <Ar>

平凡な元素は、1還元で1減る。
<Rn>,<Ar>は1還元でさらに2減る。(1つにつき1)
<Y>は1還元でさらに2減る。(1つにつき2)

だから、

最大で 文字列長 だけ還元すると 0 になってしまうのでeで止めるために - 1
しかし Rn, Ar の対の数だけ +3/+5/+7 還元が起きるので、対の数だけというかそれらの数だけ減らす
さらに Y の数の倍だけ減らす

とやるだけで答がわかる。

本当に導出できるか、手で探索してみよう。
規則の1文字化

1 => 2F
B => B3
B => 6B
3 => 33
3 => PB
3 => 52
F => 3F
F => P4
F => 51
H => H3
H => N2
H => OB
4 => BF
4 => 64
N => H5
O => HP
O => O6
P => 3P
P => P6
5 => 35
2 => 23
6 => BP
6 => 66

e => HF
e => N1
e => O4

1 => 2(F)
B => 6(F)
3 => P(F)
3 => 5(4)
H => C(1)
H => N(4)
H => O(F)
N => C(F)
O => C(4)
O => N(F)
P => 5(F)

3 => 5(F,F)
H => C(F,4)
H => C(4,F)
H => N(F,F)
O => C(F,F)

H => C(F,F,F)

O(PBP4)33352335233PB5(F)(F)335233523333335(F,F)5(4)35(P66BF,PBF)5(35(6(F)51)
  a~~~                                                            b~ c~~~
P6BP6(351)3P66BP4,F)P6(F)5(33F)(3F)35(5(4)F,35(4)3352P(F)PB35(4)335235(64)F)
      d~~                  e~~  f~    g~~                              h~
5252335(4)335(F)6BP6(351)3P6(F)PBPB33523PB52P(F)523523523P6B5(F,F)33P(F)PB33
                     d~~
PB5(6(F)3P(F)5(333523(3F),35(F)B33352F)PBF)35(F)(333F)5(F)6(P4)F
                      f~                         i~~~       j~

a: F => P4 => P64 => PBP4
b: 5 => 35
c: B => 6(F)
d: F => 51 => 351
e: F => 3F => 33F
f: F => 3F
g: 3 => 5(4)
h: 4 => 64
i: F => 3F => 33F => 333F
j: F => P4

O(F)33352335233PB5(F)(F)335233523333335(F,F)5(4)35(P66BF,PBF)5(5(B51)P6BP6
a~~~                                               b~~~~ c~~     d~~
(F)3P66BP4,F)P6(F)5(F)(F)35(3F,35(4)3352P(F)PB35(4)335235(4)F)525
                            e~
2335(4)335(F)6BP6(F)3P6(F)PBPB33523PB52P(F)523523523P6B5(F,F)33P(F)PB33PB5
(6(F)3P(F)5(333523(F),35(F)B33352F)PBF)35(F)(F)5(F)6(F)F

a: H => O(F)

d: 4 => BF => B51
e: F => 3F

H33352335233PB5(F)(F)335233523333335(F,F)5(4)35(P66BF,PBF)5(5(4)P6BP6
(F)3P66BP4,F)P6(F)5(F)(F)35(F,35(4)3352P(F)PB35(4)335235(4)F)525
2335(4)335(F)6BP6(F)3P6(F)PBPB33523PB52P(F)523523523P6B5(F,F)33P(F)PB33PB5
(6(F)3P(F)5(333523(F),35(F)B33352F)PBF)35(F)(F)5(F)6(F)F

これ以上は非決定的になってとても手ではやれない。投了。
