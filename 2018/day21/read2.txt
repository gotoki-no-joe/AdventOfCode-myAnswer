--- 直訳

// #ip 4
 0 : seti 123 0 3       r3 = 123
 1*: bani 3 456 3       r3 &= 456
 2 : eqri 3 72 3        r3 = r3 == 72 ? 1 : 0
 3 : addr 3 4 4         r4 += r3 : r3 == 72 なら 5 へ
 4 : seti 0 0 4         r4 = 0 : 1 へ インタプリタにバグがあったら追い返す
[5:]
 5 : seti 0 5 3         r3 = 0
 [6:]
 6 : bori 3 65536 2     r2 = r3 | 65536
 7 : seti 7637914 8 3   r3 = 7637914
 [8:]
 8 : bani 2 255 1       r1 = r2 & 255
 9 : addr 3 1 3         r3 += r1
10 : bani 3 16777215 3  r3 &= 16777215
11 : muli 3 65899 3     r3 *= 65899
12 : bani 3 16777215 3  r3 &= 16777215
13 : gtir 256 2 1       r1 = 256 > r2
14 : addr 1 4 4         r4 += r1 : 256 > r2 なら 16 へ -> 28へ
15 : addi 4 1 4         r4 += 1 : さもなくば 17へ
16 : seti 27 1 4        r4 = 27 : 28 へ
17 : seti 0 7 1         r1 = 0
[18]
18 : addi 1 1 5         r5 = r1 + 1
19 : muli 5 256 5       r5 = r5 * 256
20 : gtrr 5 2 5         r5 = r5 > r2
21 : addr 5 4 4         r5 += r5 : r5 > r2 なら 23 へ -> 26へ
22 : addi 4 1 4         r4 += 1 : さもなくば 24 へ
23 : seti 25 3 4        r4 = 25 : 26へ
24 : addi 1 1 1         r1 += 1
25 : seti 17 0 4        r4 = 17 : 18 へ
[26:]
26 : setr 1 8 2         r2 = r1
27 : seti 7 7 4         r4 = 7 : 8 へ
[28:]
28 : eqrr 3 0 1         r1 = r3 == r0
29 : addr 1 4 4         r3 == r0 なら 31 へ
30 : seti 5 5 4         r4 = 5 : 6 へ

31 : HALT

------

--- 意訳に直していく

[5:]
r3 = 0

[6:]
r2 = r3 | 65536
r3 = 7637914

[8:]
// よくわからない呪文でr3にr2の下位8ビットを足し込む
r3 = (((r3 + r2 & 255) & 166777215) * 65899) & 166777215

256 > r2 なら、28へ抜ける

(17～27)
r2 = r2 / 256
8 へ : r2が消えるまでする内側のループ

[28:]
r3 が正解なら HALT さもなくば 6 へ戻る r3 は現在の結果のまま

------

seq = take 10 $ iterate step 0
step r3 = foldl inner 7637914 $ takeWhile (0 <) $ iterate (flip div 256) $ r3 .|. 65536
inner r3 r2 = (((r3 + r2 & 255) & 166777215) * 65899) & 166777215


エミュレーションによるr2,r3の値の観察結果
ghci> main2
r2: 256
r2: 1
r3: 2792537
r2: 11164
r2: 43
r3: 10951038
r2: 42777
r2: 167
r3: 5127334
r2: 20284
r2: 79
r3: 4230177
r2: 16780
r2: 65
r3: 2939640
r2: 11738
r2: 45
r3: 16686255
Interrupted.

Haskellで再現したはずのr3の列
ghci> Main.seq
[0,25186393,164647191,137367664,145772891,143671657,25215303,152076360,160469070,32538916]

数字の書き写しを一つ間違えていた！

ghci> Main.seq
[0,2792537,10951038,5127334,4230177,2939640,16686255,1985020,11169624,2783270]

よし。

https://www.reddit.com/r/adventofcode/comments/a86jgt/2018_day_21_solutions/
答え？見ちゃった。

r3=0から始まって、最初がpart1の答えで、0に戻ってくるところだと思って探したら違うと言われた。
それより手前に、同じ値にくる不動点があって、そこで固着するらしい。なるほど。
気づかなかった。

あーやっぱ違うかな。IntSetで出現した値を全て追いかけて、出現済みの値を算出するr3が答え、というコードだから、
前から順にやらないとそれは求められないね。
